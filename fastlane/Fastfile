# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:ios)

platform :ios do
  profileName = "ChartrDistribution"

  # Fill in with your bundle ID
  bundleId = ""

  metadataPath = "fastlane/metadata"
  scheme = "Chartr"

  # keyfile used to authenticate with Apple services
  # you will need to create your own from the developer portal
  #apiKeyPath = "fastlane/auth.json"

  # Fill in with your team ID
  teamId = ""
  projPath = "./Chartr/Chartr.xcodeproj"

  buildNumber = 0
  versionName = "1.0.0"

  def kill_simulators
    Action.sh("killall -9 Simulator 2>/dev/null || echo No simulators running")
  end

  def cleanup
    clear_derived_data(derived_data_path: "./dd")
  end

  desc "The unitTest lane runs all unit tests and generates a code coverage report."
  lane :unitTest do
    kill_simulators
    scan(scheme: "#{scheme}", devices: ["iPhone 12"], derived_data_path: "./dd")
  end

  desc "The getLatesetBuildNumber lane retrieves the latest build number for the current version in ITC for the passed in options[:bundleId]"
  lane :getLatestBuildNumber do |options|
    latest_testflight_build_number(
      version: versionName,
      api_key_path: apiKeyPath,
      app_identifier: options[:appId],
      initial_build_number: 0, # default if no build number is found for specified version
      team_id: teamId
    )
  end

  desc "The buildReleaseCore lane builds the project archive in the enterprise configuration"
  lane :buildReleaseCore do
    # manual code signing
    puts "-----> Updating code signing settings...."
    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: profileName,
      code_sign_identity: "Apple Distribution",
      bundle_identifier: bundleId,
      team_id: teamId,
      path: projPath
    )

    output_name = "#{scheme}_Release_#{buildNumber}"

    ios_set_version(
      version: versionName,
      xcodeproj: projPath
    )

    gym(
      scheme: "#{scheme}", 
      configuration: "Release", 
      output_name: "#{output_name}", 
      clean: true, 
      export_method: "app-store",
      output_directory: "./.build/Release", 
      archive_path: "./.build/Release/#{output_name}", 
      include_symbols: true,
      derived_data_path: "./dd")
  end

  desc "The uploadToTestflight lane builds the project archive in the Release configuration and submits to Testflight"
  lane :uploadToTestflight do
    begin
      latestBuildNumber = getLatestBuildNumber appId:bundleId
      buildNumber = latestBuildNumber + 1
      ios_set_build_number(
        build_number: buildNumber, # optional, if not specified, Build Number will be incremented
        xcodeproj: projPath
      )

      buildReleaseCore
      output_name = "#{scheme}_Release_#{buildNumber}"

      pilot(
       api_key_path: apiKeyPath,
       skip_waiting_for_build_processing: true,
       app_identifier: bundleId,
       ipa: "./.build/Release/#{output_name}.ipa"
      )
    rescue => exception
      cleanup
      raise exception
    else
      cleanup
    end
  end

end
